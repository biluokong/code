1、实现网络编程的三要素
    （1）IP地址：设备在网络中的地址，是唯一的标识
        ● IP(Internet Protocol)：全称“互联网协议地址”，是分配给上完设备的网页标志
        ● 常见的IP分类为：IPv4（4个字节储存十进制表示）和 IPv6（16字节，128位，十六进制表）
        ● IP地址操作类：InetAddress
    （2）端口：应用程序在设备中唯一的标识
        ● 端口号：标识正在计算机设备上运行的进程（程序），被规定为一个16为的二进制，范围是 0~65535
        ● 端口类型：（不可以一台设备上出现一样的端口，会冲突）
            ● 周知端口：0~1023，被预先定义的知名应用占用（如：HTTP占用80，FTP占有21）
            ● 注册端口：1024~49151，分配给用户进程或某些应用程序（如：Tomcat 8080，MySQL 3306）
            ● 动态端口：49152~65535，一般不固定分配给某种进程，而是动态分配的
    （3）协议：数据在网络中传输的规则，常见的有UDP协议和TCP协议
        ● 通信协议：连接和通信数据的规则被称为网络通信协议
        ● 网络通信协议的参考模型
            ● OSI参考模型：分7层 应用层、表示层、会话层、传输层、网络层、数据链路层、物理层
                ● 世界互联协议标准，全球通信规范（过于理想化，为在因特网上推广）
            ● TCP/IP参考模型：分为 应用层、传输层、网络层、数据链路层+物理（事实上的国际标准）
        ● 各层对应：
                    OSI               TCP/IP          各层对应
            ● 应用层、表示层、会话层     应用层   HTTP、FTP、DNS、SMTP...
            ●     传输层               传输层         TCP、UDP...
            ●     网络层               网络层         IP、ICMP...
            ● 数据链路层、物理层     数据链路层+物理    物理寻址、比特流...
        ● 传输层的两个常见协议
            ● TCP(Transmission Control Protocol)：传输控制协议
                ● 通信场景：对信息安全要求较高的场景，例如：文件下载、金融等数据通信
            ● UDP(User Datagram Protocol)：用户数据报协议
                ● 通信场景：语音通话，视频会话等
--------------------------------------------------------------------------------------------------------
        ● UDP协议特点
            ● UDP协议是一种(面向)无连接、不可靠传输的协议
            ● 将数据源IP、目的地IP和端口号封装成数据包，不需要建立连接
            ● 每个数据包的大小限制在64KB内，数据不安全，易丢失数据
            ● 发送时不管对方是否准备好，接收方收到也不确认，所以是不可靠的
            ● 可以广播发送，发送数据结束时无需释放资源，开销小，速度快
            ● UDP的接收端可以接收很多发送端的消息，因为接收端只负责接收数据包，而不管是哪个发送端发送的
        ● UDP的三种通信方式
            ● 单播：单台主机与单机主机之间的通信
            ● 广播：当前主机与所在网络中的所有主机通信
                ● 实现方式：使用广播地址：225.225.225.225
                    ● 1、发送端发送的数据包的目的地写的是广播地址、且指定端口（225.225.225.225,9999）
                    ● 2、本机所在网端的其它主机的程序只要匹配端口成功就可以收的消息了（9999）
            ● 组播：当前主机与选定的一组主机的通信
                ● 实现方式：使用组播地址：224.0.0.0 ~ 239.225.225.225
                    ● 1、发送端的数据包的目的地是组播IP（例如：224.0.1.1，端口：9999）
                    ● 2、接收端必须绑定该组播IP（224.0.1.1），端口还要对应发送端的目的端口9999
                    ● 3、DatagramSocket 的子类 MulticastSocket 可以在接收端绑定组播IP
--------------------------------------------------------------------------------------------------------
         ● TCP协议特点
                    ● 使用TCP协议，必须双方先建立连接，它是一种面向连接的可靠通信协议
                    ● 传输前，采用 “三次握手” 方式建立连接，所有是可靠的
                    ● 断开连接常用 “四次挥手” 的方式
                    ● 在连接中可进行大数据量的传输
                    ● 连接、发送数据都需要确认，且传输完毕后，还需释放已建立的连接，通信效率较低
         ● TCP通信实现方式
            ● 客户端发送消息的实现步骤
                1、创建客户端的Socket对象，请求与服务端的连接
                2、使用Socket对象调用getOutputStream()方法得到字节输出流
                3、使用字节输出流完成数据的发送（可包装成高级的输出流：PrintStream）
                4、释放资源：关闭socket管道
            ● 服务端接收消息的实现步骤（一发一收和多发多收）
                1、创建服务端的ServerSocket对象，传入参数（对应的端口号）
                2、调用accept方法，堵塞等待接收客户端的Socket连接请求，获得Socket对象，建立Socket通信管道
                3、从socket对象获得字节输入流完成数据的发送（可包装成高级的输入流：BufferedReader）
                4、按照行读取消息
            ● 服务端接收消息的实现步骤（同时接收多个客户端的信息）
                1、创建服务端的ServerSocket对象，传入参数（对应的端口号）
                2、循环调用accept方法，堵塞等待接收客户端的Socket连接请求，获得Socket对象，建立Socket通信管道
                3、每接收到一个客户端的Socket管道，就交给一个独立的子线程负责读取消息
                4、创建独立线程处理socket对象：从socket对象获得字节输入流完成数据的发送、按照行读取消息
                ● 重点：
                    ● 主线程定义了循环负责接收客户端Socket管道连接
                    ● 每接收到一个Socket通信管道后分配一个独立的线程负责处理它
                ● 问题：客户端和服务端的线程模型是：N-N的关系，客户端并发的越多，系统瘫痪的越快
                    ● 处理方法：使用线程池优化
                       ● 优势：可以复用线程处理多个客户端，避免系统瘫痪；适合客户端通信时长较短的场景

         ● 即时通信：指一个客户端的消息发出去，其它客户端可以接收到
            ● 即时通信需要进行端口转发的设计思想
            ● 服务端需要把在线的Socket管道储存起来
            ● 一旦收到一个消息要推送给其它管道
         ● TCP通信实现BS请求网页信息
            ● 客户端使用浏览器发起请求
            ● 服务端必须按照浏览器的协议规则响应数据（HTTP协议）