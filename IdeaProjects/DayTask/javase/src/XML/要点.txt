1、XML概述
    （1）XML是可扩展标记语言(Extensible Markup Language)的缩写，是一种可以描述复杂数据结构的数据表示格式，常用于传输和储存数据
    （2）特点：一、纯文本，默认使用UTF-8编码；二、可嵌套
    （3）使用场景：XML内容经常用于网络传输数据，或者作为配置文件用于储存系统的信息

2、文档约束
    （1）文档约束：用来限定XML文件里的标签中的标签以及属性应该怎么写
    （2）分类
        ● DTD
           ● 利用DTD文档约束来约束一个XML文件的编写的步骤
                1、编写DTD约束文档，后缀名必须是.dta
                    <!ELEMENT 书架 (书+)>
                    <!ELEMENT 书 (书名,作者,售价)>
                    <!ELEMENT 书名 (#PCDATA)>
                    <!ELEMENT 作者 (#PCDATA)>
                    <!ELEMENT 售价 (#PCDATA)>
                2、在需要编写的xml文件中导入该DTD约束文档
                    <!DOCTYPE 书架 SYSTEM "data.dtd">
                3、按照约束规定编写xml文件的内容
           ● 作用：可以约束XML文件的编写
           ● 问题：不能约束具体的数据类型
        ● schema：可以约束具体的数据类型，约束能更强大；它本身也是一个xml文件，也受其它约束文件的约束，使用必须更严谨
            ● 使用schema约束文档约束xml文件的步骤（具体操作看文件）
                1、编写schema约束文档，后缀必须是.xsd
                2、在需要编写的xml文件中导入该约束文档
                3、按照约束内容编写xml文件内容

3、XML文件的解析技术：Dom4J
    （1）XML的数据的作用是：储存数据、做配置信息、进行数据传输；最终需要被程序进行读取，解析里面的信息
    （2）XML解析就是使用程序读取XML中的内容，解析方法有两种：SAX解析(一行一行读)、DOM解析(先整个读，再作为树)
    （3）Dom常见的解析工具：
        ● JAXP：sun公司提供的一套XML解析的API
        ● JDOM：开源，基于树形结构，利用纯java技术进行对xml文件的解析、生成、序列化等
        ● dom4j：是JDOM的升级品，用来读写XML文件。具有性能优异、功能强大和极其易使用的特点，开源的。（高于sum官方的）
        ● jsoup：功能强大的DOM方式的XML解析开发包，尤其对HTML解析更加方便
    （4）使用Dom4j解析XML
        1、导入Dom4j的jar包，并添加到库中
        2、得到Document对象（使用SAXReader类的方法）
            ● public SAXReader()            创建Dom4j的解析器对象
            ● Document read(String url)     加载XML文件成为Document对象
        3、获得根元素对象（Document类中的方法）：Element getRootElement()
        4、使用根元素对象获得其它子元素对象

4、XML文件中数据检索技术：XPath
    （1）XPath在解析XML文档方面提供了独树一帜的路径思想，更加优雅、高效
    （2）SPath使用路径表达式来定位XMl文档中的元素节点后属性节点（如 /元素/子元素/孙元素）
    （3）使用方法
        1、导入jar包（dom4j 和 jaxen的），XPath技术依赖于Dom4j技术
        2、通过dom4j的SAXReader获取Document对象
        3、利用XPath提供的API，结合XPath的语法完成选取XML文档元素节点进行解析操作
        4、Document中与XPath相关的API如下
            ● Node selectSingleNode("表达式")  获取符号表达式的唯一元素
            ● List<Node> selectNodes("表达式") 获取符号表达式的元素集合
    （4）Xpath的四大检索方案：绝对路径、相对路径、全文检索、属性查找
        ● 绝对路径：/根元素/子元素/孙元素...
        ● 相对路径：./子元素/孙元素...
        ● 全文检索：//元素/子元素    所有路径下检索该元素的子元素
        ● 属性查找：@属性名称(找属性)、元素[@属性名称]、元素[@属性名称=值]（后两个找元素：定位更准确，定位的元素必须有此属性）