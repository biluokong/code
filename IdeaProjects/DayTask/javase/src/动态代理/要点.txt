1、基本概念
    （1）代理(proxy)：某些场景下对象会找一个代理对象，来辅助自己完成一些工作
    （2）作用：主要是对对象的行为额外做一些辅助操作

2、开发动态代理对象的方法
    （1）创建一个对象，此类必须实现接口（表示具备的功能）
    （2）生成该对象的代理对象，定义一个类设计获得代理对象的方法，在通过Proxy的静态方法返回一个代理对象
        ● Java中代理的代表类是：java.lang.reflect.Proxy
        ● Proxy的静态方法：newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)
            用于为对象产生一个代理对象返回
            ● loader：定义代理类的类加载器
            ● interfaces：代理类要代理实现的接口列表
            ● h：代理对象的调用处理程序

3、通过代理对象调用方法的执行流程
    （1）先走向代理对象
    （2）代理可以为方法额外做一些辅助工作
    （3）代理对象真正触发对象的方法并执行
    （4）回到代理中，由代理负责返回结果给方法的调用者

4、动态代理的优点
    （1）可以在不改变源码的情况下，实现对方法功能的增强，提高了代码的复用
    （2）简化了编程工作、提高了开发效率，同时提高了软件系统的扩展性
    （3）可以为被代理对象的所有方法做代理
    （4）非常灵活，支持任意接口类型的实现类对象做代理，也可以直接为接口本身做代理