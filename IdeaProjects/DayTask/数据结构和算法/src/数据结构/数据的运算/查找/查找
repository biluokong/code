
1、基本概念
        （1）查找表：是由同一类型的数据元素(或记录)构成的集合。由于“集合”中的数据元素之间存在着“松散的关系”，因此查找表是一种应用灵便的结构

        （2）查找的概念：根据给定的值，在查找表中确定一个其关键字等于给定值的数据元素(或记录)
                      ①若查找表中存在查找的记录，则称“查找成功”，查找结构给出整个记录的信息，或指示该记录在查找表中位置
                      ②否则称“查找不成功”，查找结构给出“空记录”或“空指针”

        （3）关键字：用来标识一个数据元素(或记录)的某个数据项的值
                   ①主关键字：可唯一地标识一个记录的关键字
                   ②次关键字：可以识别若干记录的的关键字

        （4）查找的目的(对查找表常进行的操作)
                ①查询某个“特定的”数据元素是否在查找表中
                ②检索某个“特定的”数据元素的各种属性
                ③在查找表中插入一个数据元素
                ④删除查找表中的某个数据元素

        （5）查找的分类
                ①静态查找表：仅作“查询”(检索)操作的操作表
                ②动态查找表：作“插入”和“删除”操作的操作表

        （6）查找算法的评价指标：关键字的平均比较次数，也称平均查找长度ASL(Average Search Length)
                             ASL = ∑pi*ci (i=1,2...n)
                                pi:关键字比较次数的期望值；
                                n:记录的个数；
                                pi：查找第i个记录的概率(通常认为pi=1/n);
                                ci：找到第i个记录所需的比较次数

        （7）查找的方法：取决于查找表的结构，即表中数据结构是依赖何种关系组织在一起的。对于无规律可循的表中，只能一一遍历。为了提供查找效率，一个办法就是在构造查找表时，在集合中的数据元素之间人为地加上某种确定的约束关系

2、线性表的查找
        （1）顺序查找
                ①应用范围：  顺序表或线性链表表示的静态查找表;      表内元素之间无序;
                ②
                ③复杂度：时间复杂度为：O(n)；空间复杂度为：O(1)——开辟了一个辅助空间
                ④优点：算法简单，逻辑次序无要求，且不同储存结构均适用
                ⑤缺点：ASL太长，时间效率太低

        （2）折半查找(二分或对分查找)：每次能将待查记录所在区间缩小一半
                ①
                ②
                ③
                ④⑤⑥
        （3）分块查找

3、树表的查找
        （1）二叉排序树(Binary Sort Tree)（又称二叉搜索树、二叉查找树）
                ①定义：若其左子树非空，则其左子树上结点的值均小于根结点的值；若右子树非空，则其右子树结点的值均大于根结点；其左右子树又各是一颗二叉排序树
                ②
                ③④⑤⑥

        （2）平衡二叉树(balanced binary tree)（有称AVL树(Adelson-Velskii and Landis)）
                ①定义：一颗平衡二叉树或者是空树，或者是具有下列性质的二叉排序树：
                        左子树与右子树的高度之差的绝对值小于等于1；其左右子树也是平衡二叉排序树
                ②平衡因子(BF)：(为方便起见，给每个结点附加一个数字，给出该结点左子树与右子树的高度差)平衡因子 = 结点左子树的高度 - 结点右子树的高度（根据平衡二叉树的定义，其值为-1、0、1）
                ③④⑤⑥
