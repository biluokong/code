#include"add.h"
//1、指针在32位编译器环境下占用内存为4个字节
//   指针在64位编译器环境下占用内存为8个字节
// 
// 2、空指针（NULL，编号为0的内存空间是不可以访问的）
//		  0~255之间的内存编号（中断向量表地址）是系统占用，不可以访问，不然可能导致系统崩溃
// 
// 3、const修饰指针的三种情况：
//		（1）常量指针：
//									const int * p = &a;
//								    a、不能通过指针来改变指针指向的内存空间的值，通过变量本身可以
//								    b、仅指针指向的地址可以改变
//		（2）指针常量：
//									int * const p = &a;
// 							    a、能通过指针来改变指针指向的内存空间的值
//								    b、但不能改变指针指向的地址
//		（3）常量指针常量：
// 								const int * const p = &a;
// 							    a、既不能通过指针来改变指针指向的内存空间的值
//								    b、又不能改变指针指向的地址
// 
/*void main ()
{
	int a = 3;
	int b = 6;
	cout << add(a, b) << endl;
	int* pr = &a;
	cout << sizeof(pr) << endl;

	/*const int* p = &a;
    //*p = 5; 不能这样写，编译器会报错
	a = 9;
	p = &b*/;

	/*int* const p = &a;
	*p = 7;
	//p = &b;不能这样写，编译器会报错*/

	/*const int* const p = &a;*/
	//下面两种方式编译器都会报错，不能这样写
	/**p = 6;
	p = &b;*/
	/*system("pause");
}*/